// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                 String  @id @default(cuid())
  userId             String  @map("user_id")
  type               String
  provider           String
  providerAccountId  String  @map("provider_account_id")
  refresh_token      String?
  access_token       String?
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?
  session_state      String?
  oauth_token_secret String?
  oauth_token        String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model User {
  id         String    @id @default(uuid())
  name       String
  age        DateTime
  occupation String
  gender     Gender
  address    String
  email      String    @unique
  role       Role      @default(USER)
  visits     Visit[]
  createdAt  DateTime  @default(now()) @map(name: "created_at")
  updatedAt  DateTime  @updatedAt @map(name: "updated_at")
  accounts   Account[]
  sessions   Session[]


  @@index([name])
  @@map(name: "users")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verificationtokens")
}

model Visit {
  id               String       @id @default(uuid())
  createdAt        DateTime     @default(now()) @map(name: "created_at")
  updatedAt        DateTime     @updatedAt @map(name: "updated_at")
  title            String
  author           User         @relation(fields: [authorId], references: [id])
  authorId         String
  height           Int
  wight            String
  BMI              Int
  BP               Int
  reason           String
  History          String
  Allergy          String
  sessiontype      SessionType
  Symptoms         String
  Observation      String
  Assessment       String
  Plan             String
  Additional_notes String
  medications      Medication[]
  Referral         String
  lab              Lab[]
  nextvisit        DateTime

}

model Lab {
  id      String  @default(uuid())
  name    String  @unique
  Visit   Visit?  @relation(fields: [visitId], references: [id])
  visitId String?
}

model Medication {
  id      String  @default(uuid())
  name    String  @unique
  dose    String
  Visit   Visit?  @relation(fields: [visitId], references: [id])
  visitId String?
}

enum Role {
  USER
  ADMIN
}

enum Gender {
  MALE
  FEMALE
}

enum SessionType {
  URGENT
  FOLLOWUP
  ROUTINE
}
